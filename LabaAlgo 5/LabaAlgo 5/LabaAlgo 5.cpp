#include <iostream>
#include <cmath>
using namespace std;
int main() {
	setlocale(LC_ALL, "ru");
	int a;

	printf("Введите номер задания\n");
	scanf_s("%i", &a);
	switch (a) {
	case 1: {
	/*Ввести число N – порядок квадратной матрицы. Последовательно по строкам
ввести с клавиатуры все элементы матрицы. Вывести матрицу на экран и сообщить, какой
элемент является минимальным и его индексы (координаты), а какой максимальным и его
индексы (координаты).
*/
		int N, i, j ;
		int** a;
		printf("Введите размер квадратной матрицы\n");
		scanf_s("%d", &N);
		a = new int*[N];
		for (i = 0; i < N; i++) {//задаем значения матрицы
			a[i] = new int[N];
			for (j = 0; j < N; j++) {
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		int min = a[0][0], max = a[0][0];
		int mini = 0, maxi = 0, minj = 0, maxj = 0;
		for (i=0; i < N; i++) {
			for (j=0; j < N ; j++) {
				
				if (a[i][j] > max) {
					max = a[i][j];
					maxi = i;
					maxj = j;
				}
				if (a[i][j] < min)
				{
					min = a[i][j];
					mini = i;
					minj = j;
				}
			}
		}
		printf(" Максимальный элемент a[%d][%d] = %d",maxi,maxj, max);
		printf(" Минимальный элемент a[%d][%d] = %d",mini, minj, min);

	}break;
	case 2: {
	/* Ввести число N – порядок квадратной матрицы. Последовательно по строкам
ввести с клавиатуры все элементы матрицы. Найти в каждой строке матрицы наибольший
элемент, поменять его местами с элементом главной диагонали*. Вывести матрицу на экран в
форме таблицы.
*/
		int N, i, j;
		int** a;
		int max = 0, c, b;
		printf("Введите размер квадратной матрицы\n");
		scanf_s("%d", &N);
		a = new int* [N];
		for (i = 0; i < N; i++) {//задаем значения матрицы
			a[i] = new int[N];
			for (j = 0; j < N; j++) {
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		for (i = 0; i < N; i++) {//выводим начальный массив
			for (j = 0; j < N; j++) {
				printf("%d ", a[i][j]);
			}
			printf("\n");
		} 
		printf("\n");
		for (int i = 0; i < N; i++) {//поиск макс в строках
			max = a[i][0];
			c = 0;
			for (int j = 0; j < N; j++) {
				if (a[i][j] > max) {
					c = j;
					max = a[i][j];
				}

			}
			cout << '\n';
			b = a[i][i];
			a[i][i] = a[i][c];
			a[i][c] = b;
		}

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
				cout << a[i][j]<<" ";
			cout << '\n';
		}
		delete[] a;
	}break;
	case 3: {
	/* Ввести числа N и M – размер матрицы. Последовательно по строкам ввести с
клавиатуры все элементы матрицы. Вычислить и записать в память суммы и произведения
элементов каждой строки матрицы. Результаты отобразить в виде двух столбцов (первый
столбец – сумма в соответствующей строке, второй – произведение).*/
		int N, M;
		int** a;
		int** b;
		int i, j;
		int sum = 0, pro = 1;
		cout << "Введите размер матрицы (строка х столбец)" << endl;//строкаi на столбецj
		cin >> N >> M;

		a = new int* [N];//строка столбец
		b = new int* [N];
		for (int i = 0; i < N; i++) {
			a[i] = new int[M];
			b[i] = new int[M];
			for (int j = 0; j < M; j++) {
				
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		for (i = 0; i < N; i++) {
			for (j = 0; j < M; j++) {
				printf("%d  ", a[i][j]);
			}
			printf("\n");
		}
		printf("\n");
		for (i = 0; i < N; i++) {
			sum = 0, pro = 1;
			for (j = 0; j < M; j++) {
				sum += a[i][j];
				pro *= a[i][j];
			}
			j = 0;
			b[j][i] = sum;
			b[j][i++] = pro;
			
		}
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				printf("%d  %d\n ", b[i][j], b[i][j++]);
			}
		}
		//исправить
		
		delete[] a;
		delete[] b;

	}break;
	case 4: {
	/* Ввести числа N и M – размер матрицы. Последовательно по строкам ввести с
клавиатуры все элементы матрицы. Вычислить и запомнить сумму и число положительных
элементов каждого столбца матрицы. Результаты отобразить в виде двух строк.*/
		int N, M;
		int** a;
		int i, j;
		int b[2][3];
		
		int sum = 0, chi = 0;
		cout << "Введите размер матрицы (строка х столбец)" << endl;//строкаi на столбецj
		cin >> N >> M;
		a = new int* [N, M];//строка столбец
		for (int i = 0; i < N; i++) {
			a[i] = new int[N];
			for (int j = 0; j < M; j++) {

				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		for (i = 0; i < N; i++) {//визуально матрица
			for (j = 0; j < M; j++) {
				printf("%d  ", a[i][j]);
			}
			printf("\n");
		}
		printf("\n");
		for (j = 0; j < M; j++) {
			sum = 0, chi = 0;
			for (i = 0; i < N; i++) {
				if (a[i][j] > 0) {
					sum += a[i][j];
					chi += 1;
				}
			}
			i = 0;
			b[i][j] = sum;
			b[i += 1][j] = chi;
		}
		for (j = 0; j < 2; j++) {
			for (i = 0; i < 3; i++) {
				printf("%d  ", b[j][i]);
			}
			printf("\n");
		}

		delete[] a;
		//исправить
	}break;
	case 5: {
	/* Ввести число N – порядок квадратной матрицы. Последовательно по строкам
ввести с клавиатуры все элементы матрицы. Вычислить:
1. произведение и число элементов матрицы, находящихся под главной диагональю;*/
		int N, i, j;
		int** a;
		int pro = 1, chi = 0;
		printf("Введите размер квадратной матрицы\n");
		scanf_s("%d", &N);
		a = new int* [N];
		for (i = 0; i < N; i++) {//задаем значения матрицы
			a[i] = new int[N];
			for (j = 0; j < N; j++) {
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		printf("\n");
		for (i = 1; i < N; i++) {
			for (j = 0; j < i; j++) {
				pro *= a[i][j];
				chi += 1;
			}
		}
		printf("Произведение элементов равно %d, а число элементов %d под диагональю", pro, chi);
		delete[]a; 
	}break;
	case 6: {
	/*Ввести число N – порядок квадратной матрицы. Последовательно по строкам
ввести с клавиатуры все элементы матрицы. Вычислить:
2. сумму и число элементов матрицы, находящихся над главной диагональю;*/
		int N, i, j;
		int** a;
		int sum=0, chi = 0;
		printf("Введите размер квадратной матрицы\n");
		scanf_s("%d", &N);
		a = new int* [N];
		for (i = 0; i < N; i++) {//задаем значения матрицы
			a[i] = new int[N];
			for (j = 0; j < N; j++) {
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		printf("\n");
		for (i = 0; i < N;i++) {
			for (j=i+1; j < N; j++) {
				sum += a[i][j];
				chi += 1;
			}
		}
		printf("Сумма элементов равно %d, а число элементов %d над диагональю", sum, chi);
		delete[] a;
	}break;
	case 7: {
	/*Ввести число N – порядок квадратной матрицы. Последовательно по строкам
ввести с клавиатуры все элементы матрицы. Вычислить:
3. произведение и число положительных элементов матрицы, находящихся под
главной диагональю;*/
		int N, i, j;
		int** a;
		int pro = 1, chi = 0;
		printf("Введите размер квадратной матрицы\n");
		scanf_s("%d", &N);
		a = new int* [N];
		for (i = 0; i < N; i++) {//задаем значения матрицы
			a[i] = new int[N];
			for (j = 0; j < N; j++) {
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		printf("\n");
		for (i = 1; i < N; i++) {
			for (j = 0; j < i; j++) {
				if (a[i][j] > 0) {
					pro *= a[i][j];
					chi += 1;
				}
			}
		}
		printf("Произведение элементов равно %d, а число элементов %d под диагональю", pro, chi);
		delete[] a;
	}break;
	case 8: {
	/*Ввести число N – порядок квадратной матрицы. Последовательно по строкам
ввести с клавиатуры все элементы матрицы. Вычислить:
4. сумму и число отрицательных элементов матрицы, находящихся над главной
диагональю.*/
		int N, i, j;
		int** a;
		int sum = 0, chi = 0;
		printf("Введите размер квадратной матрицы\n");
		scanf_s("%d", &N);
		a = new int* [N];
		for (i = 0; i < N; i++) {//задаем значения матрицы
			a[i] = new int[N];
			for (j = 0; j < N; j++) {
				cout << "введите значение елемента такой позиции" << " [" << i << "][" << j << "]" << " = ";
				scanf_s("%d", &a[i][j]);
			}
		}
		printf("\n");
		for (i = 0; i < N; i++) {
			for (j = i + 1; j < N; j++) {
				if (a[i][j] < 0) {
					sum += a[i][j];
					chi += 1;
				}
			}
		}
		printf("Сумма элементов равно %d, а число элементов %d над диагональю", sum, chi);
		delete[] a;
	}break;
	}
	return 0;
}